{
  "meta": {
    "plugin": "FP Performance Suite",
    "date": "2025-10-01",
    "wp_min": "6.6",
    "php_targets": [
      "8.2",
      "8.3"
    ]
  },
  "summary": {
    "files_scanned": 62,
    "files_total": 62,
    "issues_total": 6,
    "by_severity": {
      "critical": 0,
      "high": 1,
      "medium": 3,
      "low": 2
    }
  },
  "issues": [
    {
      "id": "ISSUE-001",
      "severity": "high",
      "category": [
        "performance",
        "assets"
      ],
      "file": "src/Services/Assets/Optimizer.php",
      "line": 524,
      "snippet": "foreach ($files as $file) {\n    $hashParts[] = $file['url'] . '|' . ($mtime ?: 0) . '|' . ($size ?: 0);\n    $asset = file_get_contents($file['path']);\n    if (false === $asset) {\n        return null;\n    }\n    $contents .= '/* ' . $file['handle'] . \" */\\n\" . $asset . \"\\n\";\n}\n$contentsHash = md5($contents);\nif (file_exists($fullPath)) {\n    $existingHash = md5_file($fullPath);\n    if (is_string($existingHash) && $existingHash === $contentsHash) {\n        return [\n            'handles' => $handles,\n            'url' => $url,\n        ];\n    }\n}",
      "diagnosis": "Combined asset generation reads every dependency on each request before verifying cache freshness, so even cache hits incur heavy I/O and memory allocations.",
      "impact": "Performance degradation on busy/shared hosts due to repeated disk reads and string concatenation.",
      "repro": [
        "Enable \"Combine CSS/JS\" in plugin assets page",
        "Load any front-end page",
        "Inspect filesystem activity (e.g. strace) to see all source files re-read each hit"
      ],
      "proposed_fix": "Calculate the combined filename from mtimes/sizes first and return early when the existing bundle hash matches; only read file contents when regeneration is required.",
      "effort": "M",
      "tags": [
        "shared-hosting",
        "bundle",
        "io"
      ]
    },
    {
      "id": "ISSUE-002",
      "severity": "medium",
      "category": [
        "performance",
        "media"
      ],
      "file": "src/Services/Media/WebPConverter.php",
      "line": 149,
      "snippet": "$query = new WP_Query([\n    'post_type' => 'attachment',\n    'post_status' => 'inherit',\n    'post_mime_type' => ['image/jpeg', 'image/png'],\n    'posts_per_page' => $limit,\n    'offset' => $offset,\n    'fields' => 'ids',\n]);\nforeach ($query->posts as $attachment_id) {\n    $metadata = wp_get_attachment_metadata($attachment_id);\n    $metadata = is_array($metadata) ? $metadata : [];\n    $result = $this->processAttachment((int) $attachment_id, $metadata, $settings);\n    if (!empty($result['converted'])) {\n        $converted++;\n    }\n    if ($metadata !== $result['metadata']) {\n        wp_update_attachment_metadata($attachment_id, $result['metadata']);\n    }\n}",
      "diagnosis": "Bulk WebP conversion performs all Imagick/GD work synchronously within a single admin request, so large batches hit execution time and memory limits.",
      "impact": "Admin UX and reliability suffer; conversions can time out mid-run leaving attachments partially processed.",
      "repro": [
        "Queue 50+ large JPEGs in Media Library",
        "Run Bulk Conversion with default batch size",
        "Observe request timeout / max execution error"
      ],
      "proposed_fix": "Process conversions asynchronously (e.g., cron or batched AJAX) and persist progress between requests to avoid long-running synchronous work.",
      "effort": "M",
      "tags": [
        "cron",
        "imagick",
        "timeout"
      ]
    },
    {
      "id": "ISSUE-003",
      "severity": "medium",
      "category": [
        "maintenance"
      ],
      "file": "src/Plugin.php",
      "line": 105,
      "snippet": "public static function onActivate(): void\n{\n    update_option('fp_perfsuite_version', '1.0.0');\n    $cleaner = new Cleaner(new Env());\n    $cleaner->primeSchedules();\n    $cleaner->maybeSchedule(true);\n}",
      "diagnosis": "Activation stores version 1.0.0 even though the plugin reports 1.0.1, so version-based migrations or compatibility checks mis-detect the installed release.",
      "impact": "Future updates may skip required migrations or repeat setup logic because the stored version never matches reality.",
      "repro": [
        "Activate the plugin",
        "Inspect option fp_perfsuite_version",
        "Compare with plugin header version"
      ],
      "proposed_fix": "Persist FP_PERF_SUITE_VERSION (or the header version) during activation and future upgrades.",
      "effort": "S",
      "tags": [
        "versioning",
        "activation"
      ]
    },
    {
      "id": "ISSUE-004",
      "severity": "low",
      "category": [
        "compatibility"
      ],
      "file": "src/Http/Routes.php",
      "line": 182,
      "snippet": "$file = FP_PERF_SUITE_DIR . '/../.codex-state.json';\nif (!file_exists($file)) {\n    return rest_ensure_response([]);\n}\n$data = json_decode((string) file_get_contents($file), true);\nif (!is_array($data)) {\n    $data = [];\n}\nreturn rest_ensure_response($data);",
      "diagnosis": "The progress endpoint reads a sibling file without verifying readability, so open_basedir or permission-restricted hosts emit warnings.",
      "impact": "Generates noisy PHP warnings and can leak filesystem paths when the endpoint is polled.",
      "repro": [
        "Enable open_basedir excluding wp-content/plugins",
        "Call /wp-json/fp-ps/v1/progress",
        "Check PHP error log for warnings"
      ],
      "proposed_fix": "Check is_readable (or use @file_get_contents) before reading and bail quietly when the file cannot be accessed.",
      "effort": "S",
      "tags": [
        "rest",
        "logging"
      ]
    },
    {
      "id": "ISSUE-005",
      "severity": "low",
      "category": [
        "maintenance",
        "filesystem"
      ],
      "file": "src/Utils/Htaccess.php",
      "line": 39,
      "snippet": "$backup = $file . '.bak-' . gmdate('YmdHis');\n$this->fs->copy($file, $backup, true);\nreturn $backup;",
      "diagnosis": "Every .htaccess update creates a timestamped backup without retention, so backups accumulate indefinitely.",
      "impact": "Unbounded backup files can exhaust quotas or slow directory listings on constrained shared hosting.",
      "repro": [
        "Toggle browser cache settings multiple times",
        "Inspect ABSPATH/.htaccess*",
        "See growing .bak files"
      ],
      "proposed_fix": "Keep only the latest backup (or a capped number) by deleting older files before writing a new copy.",
      "effort": "S",
      "tags": [
        "storage",
        "cleanup"
      ]
    },
    {
      "id": "ISSUE-006",
      "severity": "medium",
      "category": [
        "ci",
        "release"
      ],
      "file": ".github/workflows/build.yml",
      "line": 12,
      "snippet": "- name: Prepare build\n  run: |\n    cd fp-performance-suite\n    zip -r ../build/fp-performance-suite.zip . -x '*.git*'",
      "diagnosis": "The workflow writes into ../build without creating the directory, so zip aborts with a missing path and the build fails.",
      "impact": "GitHub Actions cannot publish plugin artifacts; release automation is blocked until the directory exists.",
      "repro": [
        "Trigger the Build Plugin Zip workflow",
        "Observe zip error: cannot create ../build/fp-performance-suite.zip",
        "Job fails before uploading artifact"
      ],
      "proposed_fix": "Create the build/ directory (mkdir -p ../build) or adjust the zip output path to an existing folder before zipping.",
      "effort": "S",
      "tags": [
        "github-actions",
        "workflow",
        "zip"
      ]
    }
  ],
  "conflicts": [],
  "compat": {
    "deprecated": [
      "Progress endpoint should verify readability before file_get_contents to avoid open_basedir warnings."
    ],
    "php_warnings": []
  },
  "perf": {
    "hotspots": [
      "Combined CSS/JS rebuilds bundles on every request (src/Services/Assets/Optimizer.php:524-587).",
      "WebP bulk conversion runs synchronously and risks timeouts (src/Services/Media/WebPConverter.php:149-177)."
    ],
    "autoload_options": [],
    "cron": []
  },
  "i18n": {
    "domain_issues": [],
    "missing": []
  },
  "tests": {
    "gaps": [
      "REST controllers (logs, presets, cleanup) lack automated coverage."
    ],
    "suggestions": [
      "Add PHPUnit or integration tests for REST permission checks and long-running task orchestration."
    ]
  },
  "manifest": {
    "previous_hash": "8f25d103ff8c9aa573ba6637cb1d802be6b5bfe2e6664fc809f7b4dc7b693987",
    "current_hash": "dd86f704656f93a2b818915c1680d6722374b0bffb69c18fbf56358b962e522f",
    "added_files": [
      ".codex-state.json",
      ".github/workflows/build.yml",
      ".gitignore",
      "README.md",
      "docs/AUDIT_PLUGIN.json",
      "docs/AUDIT_PLUGIN.md",
      "docs/feature-suggestions.md"
    ],
    "removed_files": []
  }
}
